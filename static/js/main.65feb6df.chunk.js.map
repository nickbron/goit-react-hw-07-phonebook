{"version":3,"sources":["Componets/ContactForm/ContactForm.styled.jsx","redux/contactSlice.js","Componets/ContactForm/ContactForm.jsx","Componets/ContactList/ContactList.styled.jsx","Componets/Spinner/Spinner.js","Componets/ContactList/ContactList.jsx","redux/actions.js","Componets/Filter/Filter.jsx","Componets/App.styled.jsx","Componets/App.jsx","redux/contacts-reducer.js","redux/store.js","index.js"],"names":["Form","styled","form","Input","input","Button","button","contactApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","DeleteContact","mutation","ContactId","url","method","invalidatesTags","CreateContact","body","name","phone","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","ContactForm","data","createContact","onSubmit","e","preventDefault","currentTarget","elements","value","number","find","contact","toLowerCase","toast","error","reset","handleSubmit","type","pattern","title","required","spin","keyframes","Spinner","CgSpinner","ContactList","data1","isFetching","deleteContact","isLoading","contacts","useSelector","state","filter","normalizedFilter","includes","map","onClick","id","disabled","size","defaultProps","addItem","createAction","payload","shortid","generate","removeItem","filterItem","Filter","dispatch","useDispatch","autoComplete","onChange","actions","target","Card","div","App","className","reducerItems","createReducer","reducerFilter","_","combineReducers","items","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAEaA,EAAOC,IAAOC,KAAV,yEAKJC,EAAQF,IAAOG,MAAV,8JAULC,EAASJ,IAAOK,OAAV,mf,eCfNC,EAAaC,YAAU,CAClCC,YAAa,aACbC,UAAWC,YAAe,CACxBC,QAAS,iDAEXC,SAAU,CAAC,WACXC,UAAW,SAAAC,GAAO,MAAK,CACrBC,cAAeD,EAAQE,MAAM,CAC3BA,MAAO,iBAAM,aACbC,aAAc,CAAC,aAEjBC,cAAeJ,EAAQK,SAAS,CAC9BH,MAAO,SAAAI,GAAS,MAAK,CACnBC,IAAI,aAAD,OAAeD,GAClBE,OAAQ,WAEVC,gBAAiB,CAAC,aAEpBC,cAAeV,EAAQK,SAAS,CAC9BH,MAAO,kBAAsB,CAC3BK,IAAK,YACLC,OAAQ,OACRG,KAAM,CACJC,KAJG,EAAGA,KAKNC,MALG,EAASA,SAQhBJ,gBAAiB,CAAC,iBAMtBK,EAGEtB,EAHFsB,sBACAC,EAEEvB,EAFFuB,yBACAC,EACExB,EADFwB,yB,OCfa,SAASC,IACtB,IAAQC,EAASJ,IAATI,KACR,EAAwBF,IAAjBG,EAAP,oBAEA,OACE,8BACE,eAAClC,EAAD,CAAMmC,SAAU,SAAAC,GAAC,OApBF,SAACA,EAAGH,EAAMC,GAC7BE,EAAEC,iBACF,IAAMV,EAAOS,EAAEE,cAAcC,SAASZ,KAAKa,MACrCZ,EAAQQ,EAAEE,cAAcC,SAASE,OAAOD,MAE1CP,EAAKS,MAAK,SAAAC,GAAO,OAAIA,EAAQhB,KAAKiB,gBAAkBjB,EAAKiB,iBAC3DC,IAAMC,MAAN,WAAgBnB,EAAhB,8BAIFO,EAAc,CAAEP,OAAMC,UACtBQ,EAAEE,cAAcS,SASSC,CAAaZ,EAAGH,EAAMC,IAA3C,UACE,cAAC/B,EAAD,CACE8C,KAAK,OACLtB,KAAK,OACLuB,QAAQ,yHACRC,MAAM,ocAER,cAAChD,EAAD,CACE8C,KAAK,MACLtB,KAAK,SACLuB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,IAEV,cAAC/C,EAAD,CAAQ4C,KAAK,SAAb,8BCzCD,I,EAAM5C,EAASJ,IAAOK,OAAV,+e,+BCGb+C,EAAOC,YAAH,yGASGC,EAAU,YAAOC,IAAP,qBAAH,aACLH,EADK,2BCJL,SAASI,IACtB,IAAIC,EACJ,EAA6B7B,IAArBI,EAAR,EAAQA,KAAM0B,EAAd,EAAcA,WACd,EAAuC7B,IAAvC,mBAAO8B,EAAP,KAAwBC,EAAxB,KAAwBA,UAElBC,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,UACrD,GAAIhC,EAAM,CACR,IAAMiC,EAAmBJ,EAASlB,cAClCc,EAAQzB,EAAKgC,QAAO,SAAAtB,GAAO,OACzBA,EAAQhB,KAAKiB,cAAcuB,SAASD,MAIxC,OACE,qCACGP,GAAc,cAACJ,EAAD,IACdG,GACC,6BACGA,EAAMU,KAAI,SAAAzB,GAAO,OAChB,+BACE,iCAAOA,EAAQhB,KAAf,QACA,+BAAOgB,EAAQf,QACf,eAAC,EAAD,CACEyC,QAAS,kBAAMT,EAAcjB,EAAQ2B,KACrCrB,KAAK,SACLsB,SAAUV,EAHZ,UAKGA,GAAa,cAACN,EAAD,CAASiB,KAAM,KAL/B,cAHO7B,EAAQ2B,YDX7Bf,EAAQkB,aAAe,CACrBD,KAAM,I,8BEHO,GAAEE,QAZDC,YAAa,aAAa,SAAChD,EAAMc,GAAP,MAAmB,CAC3DmC,QAAS,CACPN,GAAIO,IAAQC,WACZnD,OACAc,cAQsBsC,WAJPJ,YAAa,gBAIMK,WAFnBL,YAAa,iBCTjB,SAASM,IACtB,IAAMhB,EAASF,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,UAC7CiB,EAAWC,cACjB,OACE,8DAEE,cAAChF,EAAD,CACE8C,KAAK,OACLtB,KAAK,SACLyD,aAAa,MACb5C,MAAOyB,EACPoB,SAAU,SAAAjD,GAAC,OAAI8C,EAASI,EAAQN,WAAW5C,EAAEmD,OAAO/C,cCbrD,IAAMgD,EAAOvF,IAAOwF,IAAV,4GCIF,SAASC,IACtB,OACE,eAACF,EAAD,WACE,oBAAIG,UAAU,QAAd,uBACA,cAAC,IAAD,IACA,cAAC3D,EAAD,IACA,oBAAI2D,UAAU,QAAd,sBACA,cAACV,EAAD,IACA,cAACxB,EAAD,O,8BCVAmC,EAAeC,YAAc,IAAD,mBAC/BP,EAAQZ,SAAU,SAACV,EAAD,OAAUY,EAAV,EAAUA,QAAV,4BAA4BZ,GAA5B,CAAmCY,OADtB,cAE/BU,EAAQP,YAAa,SAACf,EAAD,OAAUY,EAAV,EAAUA,QAAV,OACpBZ,EAAMC,QAAO,SAAAtB,GAAO,OAAIA,EAAQ2B,KAAOM,QAHT,IAM5BkB,EAAgBD,YAAc,GAAD,eAChCP,EAAQN,YAAa,SAACe,EAAD,YAAMnB,YAGfoB,cAAgB,CAC7BC,MAAOL,EACP3B,OAAQ6B,ICVJI,EAAQC,YAAe,CAC3BC,QAAQ,aACNtC,SAAUuC,GACT9F,EAAWE,YAAcF,EAAW6F,SAEvCE,WAAY,SAAAC,GAAoB,4BAC3BA,KAD2B,CAE9BhG,EAAW+F,gBAGAJ,IAEfM,YAAeN,EAAMhB,UCXrBuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAACR,EAAD,QAGJkB,SAASC,eAAe,W","file":"static/js/main.65feb6df.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 10px;\r\n  width: 50%;\r\n  :focus {\r\n    border: 3px solid #555;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  padding: 5px 10px;\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n  width: 100px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  outline: none;\r\n  color: #fff;\r\n  background-color: #4caf50;\r\n  border: none;\r\n  border-radius: 15px;\r\n  box-shadow: 0 9px #999;\r\n\r\n  :hover {\r\n    background-color: #3e8e41;\r\n  }\r\n  :active {\r\n    background-color: #3e8e41;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n`;\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const contactApi = createApi({\n  reducerPath: 'contactApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://61687f6c09e030001712bfea.mockapi.io/',\n  }),\n  tagTypes: ['contact'],\n  endpoints: builder => ({\n    fetchContacts: builder.query({\n      query: () => '/Contacts',\n      providesTags: ['contact'],\n    }),\n    DeleteContact: builder.mutation({\n      query: ContactId => ({\n        url: `/Contacts/${ContactId}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: ['contact'],\n    }),\n    CreateContact: builder.mutation({\n      query: ({ name, phone }) => ({\n        url: '/Contacts',\n        method: 'POST',\n        body: {\n          name,\n          phone,\n        },\n      }),\n      invalidatesTags: ['contact'],\n    }),\n  }),\n});\n\nexport const {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n  useCreateContactMutation,\n} = contactApi;\n","import { Button, Input, Form } from './ContactForm.styled';\r\nimport { toast } from 'react-hot-toast';\r\n\r\nimport {\r\n  useFetchContactsQuery,\r\n  useCreateContactMutation,\r\n} from 'redux/contactSlice';\r\n\r\nconst handleSubmit = (e, data, createContact) => {\r\n  e.preventDefault();\r\n  const name = e.currentTarget.elements.name.value;\r\n  const phone = e.currentTarget.elements.number.value;\r\n\r\n  if (data.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\r\n    toast.error(` ${name} is already in contacts.`);\r\n    return;\r\n  }\r\n\r\n  createContact({ name, phone });\r\n  e.currentTarget.reset();\r\n};\r\n\r\nexport default function ContactForm() {\r\n  const { data } = useFetchContactsQuery();\r\n  const [createContact] = useCreateContactMutation();\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={e => handleSubmit(e, data, createContact)}>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        />\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n        <Button type=\"submit\">Add contact</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\nexport const Button = styled.button`\r\n  display: inline-block;\r\n  padding: 5px 5px;\r\n  margin-left: 10px;\r\n  font-size: 10px;\r\n  width: 50px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  outline: none;\r\n  color: #fff;\r\n  background-color: #4caf50;\r\n  border: none;\r\n  border-radius: 15px;\r\n  /* box-shadow: 0 9px #999; */\r\n\r\n  :hover {\r\n    background-color: red;\r\n  }\r\n  :active {\r\n    background-color: red;\r\n    box-shadow: 0 5px #666;\r\n    transform: translateY(4px);\r\n  }\r\n`;\r\n","import styled from '@emotion/styled/macro';\nimport { keyframes } from '@emotion/react';\nimport { CgSpinner } from 'react-icons/cg';\n\nconst spin = keyframes`\n0% {\n  transform: rotate(0deg);\n}\n100% {\n  transform: rotate(1turn);\n}\n`;\n\nexport const Spinner = styled(CgSpinner)`\n  animation: ${spin} 0.85s linear infinite;\n`;\n\nSpinner.defaultProps = {\n  size: 40,\n};\n","import PropTypes from 'prop-types';\r\nimport { Button } from '../ContactList/ContactList.styled';\r\nimport { useSelector } from 'react-redux';\r\nimport { Spinner } from '../Spinner/Spinner';\r\nimport {\r\n  useFetchContactsQuery,\r\n  useDeleteContactMutation,\r\n} from 'redux/contactSlice';\r\n\r\nexport default function ContactList() {\r\n  let data1;\r\n  const { data, isFetching } = useFetchContactsQuery();\r\n  const [deleteContact, { isLoading }] = useDeleteContactMutation();\r\n\r\n  const contacts = useSelector(state => state.contacts.filter);\r\n  if (data) {\r\n    const normalizedFilter = contacts.toLowerCase();\r\n    data1 = data.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isFetching && <Spinner />}\r\n      {data1 && (\r\n        <ul>\r\n          {data1.map(contact => (\r\n            <li key={contact.id}>\r\n              <span>{contact.name}: </span>\r\n              <span>{contact.phone}</span>\r\n              <Button\r\n                onClick={() => deleteContact(contact.id)}\r\n                type=\"button\"\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading && <Spinner size={12} />}\r\n                DELETE\r\n              </Button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n","import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addItem = createAction('items/Add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst removeItem = createAction('items/Remove');\n\nconst filterItem = createAction('items/Filter');\n\nexport default { addItem, removeItem, filterItem };\n","import { Input } from '../ContactForm/ContactForm.styled';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../../redux/actions';\r\n\r\nexport default function Filter() {\r\n  const filter = useSelector(state => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      Find contacts by name:\r\n      <Input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        autoComplete=\"off\"\r\n        value={filter}\r\n        onChange={e => dispatch(actions.filterItem(e.target.value))}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Card = styled.div`\r\n  width: 400px;\r\n  padding: 20px;\r\n  margin: 20px;\r\n  border: 1px solid black;\r\n`;\r\n","import { Toaster } from 'react-hot-toast';\nimport ContactForm from 'Componets/ContactForm/ContactForm';\nimport ContactList from 'Componets/ContactList/ContactList';\nimport Filter from 'Componets/Filter/Filter';\nimport { Card } from './App.styled';\n\nexport default function App() {\n  return (\n    <Card>\n      <h1 className=\"title\">Phonebook</h1>\n      <Toaster />\n      <ContactForm />\n      <h2 className=\"title\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Card>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst reducerItems = createReducer([], {\n  [actions.addItem]: (state, { payload }) => [...state, payload],\n  [actions.removeItem]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst reducerFilter = createReducer('', {\n  [actions.filterItem]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items: reducerItems,\n  filter: reducerFilter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport contactsReducer from './contacts-reducer';\n//import { usersReducer } from './users/usersSlice';\nimport { contactApi } from './contactSlice';\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n    [contactApi.reducerPath]: contactApi.reducer,\n  },\n  middleware: getDefaultMiddleware => [\n    ...getDefaultMiddleware(),\n    contactApi.middleware,\n  ],\n});\nexport default store;\n\nsetupListeners(store.dispatch);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'Componets/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}